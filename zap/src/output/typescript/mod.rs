use crate::parser::Ty;

pub mod client;
pub mod server;

pub trait Output {
	fn push(&mut self, s: &str);
	fn indent(&mut self);
	fn dedent(&mut self);
	fn push_indent(&mut self);

	fn push_line(&mut self, s: &str) {
		self.push_indent();
		self.push(s);
		self.push("\n");
	}

	fn push_ty(&mut self, ty: &Ty) {
		match ty {
			Ty::Bool => self.push("boolean"),

			Ty::F32(_) => self.push("number"),
			Ty::F64(_) => self.push("number"),

			Ty::U8(_) => self.push("number"),
			Ty::U16(_) => self.push("number"),
			Ty::U32(_) => self.push("number"),

			Ty::I8(_) => self.push("number"),
			Ty::I16(_) => self.push("number"),
			Ty::I32(_) => self.push("number"),

			Ty::Str { .. } => self.push("string"),

			Ty::Arr { ty, .. } => {
				self.push_ty(ty);
				self.push("[]");
			}

			Ty::Map { key, val } => {
				self.push("{ [index: ");
				self.push_ty(key);
				self.push("]: ");
				self.push_ty(val);
				self.push(" }");
			}

			Ty::Struct { fields } => {
				self.push("{\n");
				self.indent();

				for (name, ty) in fields.iter() {
					self.push_indent();
					self.push(&format!("{name}: "));
					self.push_ty(ty);
					self.push(",\n");
				}

				self.dedent();
				self.push_indent();
				self.push("}");
			}

			Ty::Enum { variants } => self.push(
				&variants
					.iter()
					.map(|v| format!("\"{}\"", v))
					.collect::<Vec<_>>()
					.join(" | ")
					.to_string(),
			),

			Ty::Instance(strict, name) => {
				self.push(if let Some(name) = name { name } else { "Instance" });

				if *strict {
					self.push(" | undefined")
				}
			}
			Ty::Vector3 => self.push("Vector3"),

			Ty::Ref(name) => self.push(&name.to_string()),

			Ty::Optional(ty) => {
				self.push_ty(ty);
				self.push(" | undefined");
			}
		}
	}

	fn push_file_header(&mut self, scope: &str) {
		self.push_line(&format!(
			"// {scope} generated by Zap v{} (https://github.com/red-blox/zap)",
			env!("CARGO_PKG_VERSION")
		));
		self.push("\n");
		self.push_line("export {};");
		self.push("\n");
	}
}
